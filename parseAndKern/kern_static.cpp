#include "kern_static.h"

int kern_static::gen_vmlinux_sz(size_t *outSz, size_t headOffset)
TEMPLIFY(gen_vmlinux_sz, outSz, headOffset)
void kern_static::elfConstruction()
TEMPLIFY(elfConstruction)
void kern_static::elfHeadConstruction(void* elfHead)
TEMPLIFY(elfHeadConstruction, elfHead)
int kern_static::patch_and_write(void *vmlinux_base, void *vmlinux_cur, void *phBase, size_t offset)
TEMPLIFY(patch_and_write, vmlinux_base, vmlinux_cur, phBase, offset)
int kern_static::parseAndGetGlobals()
TEMPLIFY(parseAndGetGlobals)
void kern_static::insert_section(std::string sec_name, uint64_t sh_offset, uint64_t sh_size)
TEMPLIFY(insert_section, sec_name, sh_offset, sh_size)
void kern_static::insert_elfsegment(std::string sec_name, int permissions, uint64_t Virtual, uint64_t Physical, uint64_t FileOffset, uint64_t sh_size)
TEMPLIFY(insert_elfsegment, sec_name, permissions, Virtual, Physical, FileOffset, sh_size)
void kern_static::insert_elfsection(std::string sec_name, uint64_t Virtual, uint64_t FileOffset, uint64_t sh_size)
TEMPLIFY(insert_elfsection, sec_name, Virtual, FileOffset, sh_size)
int kern_static::kcrc_index(std::string symbol, uint32_t *kcrc)
TEMPLIFY(kcrc_index, symbol, kcrc)
